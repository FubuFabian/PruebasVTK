#include "HolaMundo_VTK_ITK.h"

//main function
int main(int argc, char *argv[]){
	
	renderer->SetBackground(0, 0, 0);
	renwin->SetSize(900,900);
	interactor->SetRenderWindow(renwin);

    bool exit = true;
	static char read[256];

	Initialize();

    while(exit){
		std::cout<<"Type 'Color' to see a color image."<<std::endl;
		std::cout<<"Type 'BW' to see a grayscale image."<<std::endl;
		std::cout<<"Type 'Filter' to see a thresholded image."<<std::endl;
        std::cout<<"Type 'Exit' enter to exit."<<std::endl;
		std::cout<<std::endl;
		std::cin.getline(read,256);

		switch (s_mapStringValues[read]){
			
			case evStringValue1:
				exit=false;
			break;

			case evStringValue2:
				ColorImage();
				exit = true;
			break;

			case evStringValue3:
				BWImage();
				exit = true;
			break;

			case evStringValue4:
				FilterImage();
				exit = true;
			break;

			default:
				std::cout<<std::endl;
				std::cout<<"Incorrect Entry."<<endl;
				std::cout<<std::endl;
				exit = true;
			break;
		}
		
		
    }

    return 0;

	

}

void ColorImage(){

	// Read ITK Image //////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

    reader->SetFileName(filename); 
    reader->Update(); 

    itk_image_color = reader->GetOutput(); 

    ////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

    // Convert Itk Image to Vtk Image //////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

	conv->GetExporter()->SetInput(itk_image_color);
	conv->GetImporter()->Update(); 
    vtk_image = conv->GetOutput(); 

    ////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

	Flip();

    std::cout<<std::endl;
	std::cout<<"Color Image"<<std::endl;
	std::cout<<std::endl;
	
	renderer->RemoveActor(actor);

    actor->SetInput(vtk_image);

    renderer->AddActor(actor);
  
    renwin->AddRenderer(renderer);
    renwin->Render();
	interactor->Start();

}

void BWImage(){

	// Read ITK Image //////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

    reader_bw->SetFileName(filename); 
    reader_bw->Update(); 

    itk_image_bw = reader_bw->GetOutput(); 

    ////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

    // Convert Itk Image to Vtk Image //////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

	conv_bw->GetExporter()->SetInput(itk_image_bw);
	conv_bw->GetImporter()->Update(); 
    vtk_image = conv_bw->GetOutput();

    ////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

	Flip();

    std::cout<<std::endl;
	std::cout<<"Grayscale Image"<<std::endl;
	std::cout<<std::endl;
	
	renderer->RemoveActor(actor);

    actor->SetInput(vtk_image);
	
    renderer->AddActor(actor);
  
    renwin->AddRenderer(renderer);
    //renwin->Render();
	
	interactor->Start();
}

void FilterImage(){

	// Read ITK Image //////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

    reader_bw->SetFileName(filename); 
    reader_bw->Update(); 

    itk_image_bw = reader_bw->GetOutput(); 

    ////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

	// Filter the Image ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

	filter->SetInput(itk_image_bw);
	filter->SetOutsideValue((unsigned char)255);
	filter->SetInsideValue((unsigned char)0);
	filter->SetUpperThreshold((unsigned char)122);
	filter->SetLowerThreshold((unsigned char)0);
	filter->Update();

	itk_image_bw = filter->GetOutput();

	////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

    // Convert Itk Image to Vtk Image //////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

	conv_bw->GetExporter()->SetInput(itk_image_bw);
	conv_bw->GetImporter()->Update(); 
    vtk_image = conv_bw->GetOutput();

    ////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

	Flip();

    std::cout<<std::endl;
	std::cout<<"Filtered Image"<<std::endl;
	std::cout<<std::endl;
	
	renderer->RemoveActor(actor);

    actor->SetInput(vtk_image);
	
    renderer->AddActor(actor);
  
    renwin->AddRenderer(renderer);
    //renwin->Render();
	
	interactor->Start();
}

void Flip(){

	// Flip Image ///////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

    flipYFilter->SetFilteredAxis(1); 
    flipYFilter->SetInput(vtk_image);
    flipYFilter->Update();

    vtk_image = flipYFilter->GetOutput();
    vtk_image->SetScalarTypeToUnsignedChar();
    vtk_image->Update();

    ////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////
}

void Initialize(){
  s_mapStringValues["Exit"] = evStringValue1;
  s_mapStringValues["Color"] = evStringValue2;
  s_mapStringValues["BW"] = evStringValue3;
  s_mapStringValues["Filter"] = evStringValue4;
}

